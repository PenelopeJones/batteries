#!/usr/bin/env python3

import os
import sys
import textwrap
from optparse import OptionParser


def rasppi_key(key):
    """Returns zero padded raspberry pi numbers for sorting"""
    if key.startswith('rasppi'):
        return 'rasppi{:0>3}'.format(key.replace('rasppi', ''))
    return key


def print_machine(machine, purpose, highlight=None):
    """Pretty prints a machine and its purpose"""
    if highlight is not None:
        purpose = purpose.replace(highlight, '\033[1m\033[35m{}\033[0m'.format(highlight))
        machine = machine.replace(highlight, '\033[1m\033[35m{}\033[0m'.format(highlight))

    # Add to the width of the machine padding, if there is a highligting in machine
    width = 23
    if '\033[1m\033[35m' in machine:
        width = 23 + 13

    wrapped = textwrap.wrap(purpose, 60)
    print('{{: <{}}}{{}}'.format(width).format(machine, wrapped[0]))
    for line in wrapped[1:]:
        print('{: <23}{}'.format('', line))


# Parse arguments
usage = 'usage: purpose [optional search_term]\n\nIf a search term is '\
        'supplied, the search will be performed case insensitively, but the '\
        'search term will only be highted in the result if it is a case '\
        'sensitive match.'
parser = OptionParser(usage=usage)
options, args = parser.parse_args()


if len(args) > 1:
    parser.print_help()
    sys.exit(0)


machines_path = os.path.join(os.getenv("HOME"), 'PyExpLabSys', 'machines')
machines = sorted(os.listdir(machines_path), key=rasppi_key)
for machine in machines:
    purpose = os.path.join(machines_path, machine, 'PURPOSE')
    if os.path.isfile(purpose):
        with open(purpose) as file_:
            purpose = file_.read()

            # The purpose files have had two different formats, check for the new one
            purpose_lines = purpose.split('\n')
            # New format
            if len(purpose_lines) > 1 and\
               purpose_lines[0].startswith('id:') and\
               purpose_lines[1].startswith('purpose:'):
                # Strip the first two lines of id and shorthand purpose
                purpose = ''.join(purpose_lines[2:]).strip()
                if len(purpose) == 0:
                    purpose = purpose_lines[1].replace('purpose:', '').strip()
            
        if len(args) == 0:
            print_machine(machine, purpose)
        else:
            search = args[0].lower()
            if search in purpose.lower() or search in machine:
                print_machine(machine, purpose, highlight=search)
